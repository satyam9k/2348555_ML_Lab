# -*- coding: utf-8 -*-
"""ML_LabTest_2348555.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UB2MSeiVuAemOUhy6Ib9qox-4NfhpxqC

2348555 Lab Component
"""

#Importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder

# Load the dataset
df = pd.read_csv('/content/2015.csv')

# Exploring the dataset (getting top 5 rows)
df.head(5)

# Shape of the dataset
df.shape

"""The dataset has 158 rows and 12 columns.

"""

# Checking for null values
df.isnull().sum()

"""Thus no null values present in dataset."""

# General stats of data
df.describe()

# Create bins for the 'Happiness Score' column
bins = [0, 4.5, 6.5, 10]
labels = ['Low Happiness', 'Medium Happiness', 'High Happiness']

# Categorize countries into bins
df['Happiness Score Group'] = pd.cut(df['Happiness Score'], bins=bins, labels=labels)

# One hot encoding
label_encoder = LabelEncoder()
df['Region'] = label_encoder.fit_transform(df['Region'])

from sklearn.preprocessing import MinMaxScaler

min_max_scaler = MinMaxScaler()
df['Economy (GDP per Capita)'] = min_max_scaler.fit_transform(df['Economy (GDP per Capita)'].values.reshape(-1, 1))

# Perform a chi-square test
import scipy.stats as stats

# Create a contingency table
contingency_table = pd.crosstab(df['Region'], df['Happiness Rank'])

# Perform a chi-square test
chi2, pval, dof, expected = stats.chi2_contingency(contingency_table)

# Print the results of the chi-square test
print(f"Chi-square: {chi2}")
print(f"p-value: {pval}")
print(f"Degrees of freedom: {dof}")

#covariance matrix
numerical_columns = ["Economy (GDP per Capita)", "Family", "Health (Life Expectancy)"]

# Calculate the covariance matrix
covariance_matrix = df[numerical_columns].cov()

# Visualize the covariance matrix using a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(covariance_matrix, annot=True, cmap='coolwarm')
plt.title('Covariance Matrix for Numerical Columns')
plt.show()

# Create a bar chart
df['Happiness Score Group'].value_counts().plot(kind='bar')
plt.xlabel('Happiness Score Group')
plt.ylabel('Number of Countries')
plt.title('Count of Countries in Each Happiness Score Group')
plt.show()

# Create a histogram
df['Health (Life Expectancy)'] = (df['Health (Life Expectancy)'] - df['Health (Life Expectancy)'].min()) / (df['Health (Life Expectancy)'].max() - df['Health (Life Expectancy)'].min())
df['Health (Life Expectancy)'].hist(bins=20)
plt.xlabel('Health (Life Expectancy)')
plt.ylabel('Number of Countries')
plt.title('Histogram of Health (Life Expectancy) After Normalization')
plt.show()

# Create a stacked bar chart
df = df.dropna()
df_grouped = df.groupby(['Happiness Score Group', 'Region'])['Country'].count().unstack()
df_grouped.plot(kind='bar', stacked=True)
plt.xlabel('Happiness Score Group')
plt.ylabel('Number of Countries')
plt.title('Distribution of Region by Happiness Score Group')
plt.show()

# Create a heatmap of the covariance matrix
covariance_matrix = df.select_dtypes(include=['number']).cov()
plt.figure(figsize=(10, 8))
sns.heatmap(covariance_matrix, annot=True, cmap='coolwarm')
plt.title('Covariance Matrix')
plt.show()